
# Adapters

Adapters are objects that implement interfaces between
raw data, usally stored externally, to the internal representation
objects.

They also provide a `hook` system to modify the outputs.

## Basic Usage

```{python}
from tempfile import NamedTemporaryFile
from ms2ml.data.adapters import MSPAdapter
from ms2ml.config import Config
from pprint import pprint

# A very boring msp with 2 spectra
text = (
    "Name: ASDASD/2\n"
    "MW: 1234\n"
    '123 123 "asd"\n'
    "\n"
    "Name: ASDASDAAS/1\n"
    "MW: 12343\n"
    '123 123 "as5d"\n'
    '123 123 "asd"\n'
    "\n"
)

f = NamedTemporaryFile(delete=False)
with open(f.name, "w") as f:
    f.write(text)

my_file = f.name

my_adapter = MSPAdapter(config=Config(), file = my_file)

pprint(list(my_adapter.parse()))
```

## Hook usage to modify the output

We will keep using the same file as before, but we will add a hook to
modify the output.

Since every intermediate entry is an annotated Spectrum object, we can
get the corresponding peptide from `spec.precurse_peptide` and encode it
on the fly and return an dictionary of tensors!

```{python}
def post_hook(spec):
    return {
        "aa": spec.precursor_peptide.aa_to_count(),
        "mods": spec.precursor_peptide.mod_to_vector(),
    }

my_adapter = MSPAdapter(
    file=my_file, config=Config(), out_hook=post_hook
)

for i, x in enumerate(my_adapter.parse()):
    print(i)
    pprint(x)

```

We can even combine those outputs into batches using the `bundle` method.

```{python}
bundled = my_adapter.bundle(my_adapter.parse())
pprint({k:v.shape for k,v in bundled.items()})
```

```{python}
pprint(bundled)
```


## Changing the configuration

We can also change the configuration of the adapter to change the
output.

This makes sense if the way your model is trained requires a different
variation of the encoding.

```{python}
my_conf = Config(encoding_aa_order = ('A','S','D'))
my_adapter = MSPAdapter(
    file=my_file, config=Config(), out_hook=post_hook
)
bundled = my_adapter.bundle(my_adapter.parse())
print("Default Shapes:")
pprint({k:v.shape for k,v in bundled.items()})

my_adapter.config = my_conf
bundled = my_adapter.bundle(my_adapter.parse())
print("Configured Shapes:")
pprint({k:v.shape for k,v in bundled.items()})
```

Note that the 'aa' element only has 3 dimensions, since we only have 3
defined aminoacids in the configuration!!

```{python}
# We close the connection to the dummy file because we are good
# programmers
f.close()
```
